import type { Secret } from 'jsonwebtoken';
import { JwtPayload, UserRole } from './types';
export declare function hashPassword(password: string): Promise<string>;
export declare function comparePassword(password: string, hash: string): Promise<boolean>;
export declare function generateToken(payload: Omit<JwtPayload, 'iat' | 'exp'>, secret: Secret, expiresIn?: string | number): string;
export declare function verifyToken(token: string, secret: string): JwtPayload;
export declare function decodeToken(token: string): JwtPayload | null;
export declare function hasPermission(userRole: UserRole, permission: string): boolean;
export declare function hasAnyPermission(userRole: UserRole, permissions: string[]): boolean;
export declare function hasAllPermissions(userRole: UserRole, permissions: string[]): boolean;
export declare function isManager(userRole: UserRole): boolean;
export declare function isReceptionist(userRole: UserRole): boolean;
export declare function isGuest(userRole: UserRole): boolean;
export declare function formatDate(date: Date | string): string;
export declare function addDays(date: Date | string, days: number): Date;
export declare function getDaysBetween(startDate: Date | string, endDate: Date | string): number;
export declare function isDateInRange(date: Date | string, startDate: Date | string, endDate: Date | string): boolean;
export declare function isValidEmail(email: string): boolean;
export declare function isValidPhone(phone: string): boolean;
export declare function isValidDate(date: string): boolean;
export declare function isFutureDate(date: string): boolean;
export declare function generateRandomString(length: number): string;
export declare function generateTransactionId(): string;
export declare function slugify(text: string): string;
export declare function roundToTwoDecimals(num: number): number;
export declare function calculateDiscount(amount: number, discountPercent: number, maxDiscount?: number): number;
export declare function calculateTax(amount: number, taxRate?: number): number;
export declare function chunk<T>(array: T[], size: number): T[][];
export declare function unique<T>(array: T[]): T[];
export declare function groupBy<T, K extends keyof T>(array: T[], key: K): Record<string, T[]>;
export declare function pick<T extends object, K extends keyof T>(obj: T, keys: readonly K[]): Pick<T, K>;
export declare function omit<T, K extends keyof T>(obj: T, keys: K[]): Omit<T, K>;
export declare function isOperationalError(error: Error): boolean;
export declare function getErrorStatusCode(error: Error): number;
export declare function formatLogMessage(level: string, message: string, meta?: any): string;
export declare function generateRequestId(): string;
export declare function sanitizeForLogging(data: any): any;
//# sourceMappingURL=utils.d.ts.map